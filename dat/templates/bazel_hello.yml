name: <${TEMPLATE_NAME}>
description: This is the basic template for package generation

root:
  conf:
    package.yml:
      - package_yml_content
  src:
    lib:
      BUILD:
        - lib_build_content
      hello_world.cpp:
        - hello_world_src_content
      hello_world.h:
        - hello_world_header_content
    BUILD:
      - build_content
    main.cpp:
      - main_content
  doc:
    docs:
      about:
        about_this_package.md:
          - doc_about_package
      getting-started:
        getting_started.md:
          - doc_getting_started
      index.md:
          - doc_index
    mkdocs.yml:
      - doc_config
  extensions:
    build.py:
      - extensions_build
    run.py:
      - extensions_run
    test.py:
      - extensions_test
  tests:
    BUILD:
      - build_test_content
    test.cpp:
      - test_file_content
  WORKSPACE:
    - workspace_content
  README.md:
    - Readme_content


extensions_test: |
  import subprocess

  def test():
      subprocess.run([
          "bazel",
          "test",
          "--test_output=all",
          "//tests:tests"
      ])

  # DAT will not call the method automatically, just load it
  test()

main_content: |
  #include "src/lib/hello_world.h"

  using namespace std;

  int main() {
      cout << hello_world();
      return 0;
  }


build_test_content: |
  cc_test(
    name = "tests",
    srcs = glob(["**/*.cpp"]),
    deps = [
        "//src/lib:hello_world_lib",
        "@googletest//:gtest_main",
    ],
  )

test_file_content: |
  #include "gtest/gtest.h"
  #include "src/lib/hello_world.h"

  using namespace std;

  TEST(HelloShould, ReturnHelloWorld){
      string actual = hello_world();
      string expected = "Hello World !";
      EXPECT_EQ(expected, actual);
  }

lib_build_content: |
  cc_library(
    name = "hello_world_lib",
    srcs = glob(["**/*.cpp"]),
    hdrs = glob(["**/*.h"]),
    visibility = ["//visibility:public"],
  )

extensions_run: |
  import subprocess

  def run_app():
      print("Running my application ...")
      run_cmd = ['bazel', 'run', '//src:main']
      subprocess.run(run_cmd)

  # Call the method, since DAT is only loading the file
  run_app()

build_content: |
  load("@rules_cc//cc:defs.bzl", "cc_binary")

  # Use copts = ["-std=c++17"] for C++ 17
  cc_binary(
      name = "main",
      srcs = ["main.cpp"],
      deps = ["//src/lib:hello_world_lib"],
      visibility = ["//visibility:public"]
  )

workspace_content: |
  # Bazel workspace file
  load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

  http_archive(
    name = "googletest",
    urls = ["https://github.com/google/googletest/archive/609281088cfefc76f9d0ce82e1ff6c30cc3591e5.zip"],
    strip_prefix = "googletest-609281088cfefc76f9d0ce82e1ff6c30cc3591e5",
  )

package_yml_content: |
  # Package info section
  name: <${TEMPLATE_NAME}>
  description: This is the <${TEMPLATE_NAME}> package implementation
  url: <$url>
  version: 0.1

  # Package variants section

  variants:

      variant_1:
          platform:
              - clang


doc_about_package: |
  # Info about this package

  This is a short description of the package.


doc_getting_started: |
  # How to start with this package

  Describe here what is your package doing.


doc_index: |
  # <${TEMPLATE_NAME}> Package

  This is where you should write your documentation.


doc_config: |
  theme:
    name: material
    palette:
      # Dark mode
      - media: "(prefers-color-scheme: dark)"
        scheme: slate
        primary: black
        accent: black
        toggle:
          icon: material/weather-night
          name: Switch to dark mode
      # Light mode (to enable this when the feature is released)
      - scheme: default
        primary: blue grey
        accent: blue grey
        toggle:
          icon: material/weather-sunny
          name: Switch to light mode
  site_name: Hello Package Documentation
  site_url: https://www.github.com
  nav:
    - Home: index.md
    - About this package:
        - 'Purpose': 'about/about_this_package.md'
    - Getting Started:
        - 'How to use this package ?': 'getting-started/getting_started.md'

extensions_build: |

  import subprocess
  import shutil

  def build_pre():
    print("Calling custom build pre")
    subprocess.run([
      "bazel",
      "build",
      "//src:main"
    ])
    shutil.copytree(
      "../../../bazel-bin",
      "./bazel-bin"
    )

  def build_post():
    print("Calling custom build post")

Readme_content: |
  This is the readme file of <${TEMPLATE_NAME}> package.
  Add here important information about your package like:
  - What it does ?
  - How to use it ?


hello_world_src_content: |
  #include "hello_world.h"

  string hello_world() {
      return "Hello World !";
  }

hello_world_header_content: |
  #include <iostream>
  #include <string>

  using namespace std;

  string hello_world();